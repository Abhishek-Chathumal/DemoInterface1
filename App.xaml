<Application x:Class="DemoInterface1.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:DemoInterface1"
             xmlns:viewModel="clr-namespace:DemoInterface1.MVVM.ModelView"
             xmlns:view="clr-namespace:DemoInterface1.MVVM.View"
             StartupUri="MainWindow.xaml">
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="Theme/MenuButtonTheme.xaml"/>
                <ResourceDictionary Source="Theme/SearchBoxTheme.xaml"/>
                <ResourceDictionary Source="Theme/ScrollbarTheme.xaml"/>
                <ResourceDictionary Source="Theme/HorizontalMenuButtonTheme.xaml"/>
                <ResourceDictionary Source="Theme/SubCrollbarTheme.xaml"/>

                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Light.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Defaults.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Primary/MaterialDesignColor.DeepPurple.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Accent/MaterialDesignColor.Lime.xaml" />
            </ResourceDictionary.MergedDictionaries>

            <DataTemplate DataType="{x:Type viewModel:HomeViewModel}">
                <view:HomeView/>
            </DataTemplate>
            <DataTemplate DataType="{x:Type viewModel:VehicleViewModel}">
                <view:VehicleView/>
            </DataTemplate>
            <DataTemplate DataType="{x:Type viewModel:CustomerViewModel}">
                <view:CustomerView/>
            </DataTemplate>
            <DataTemplate DataType="{x:Type viewModel:BookingViewModel}">
                <view:BookingView/>
            </DataTemplate>
            <DataTemplate DataType="{x:Type viewModel:OwnerViewModel}">
                <view:OwnerView/>
            </DataTemplate>
            <DataTemplate DataType="{x:Type viewModel:ModelsViewModel}">
                <view:ModelsView/>
            </DataTemplate>
            <DataTemplate DataType="{x:Type viewModel:RepairsViewModel}">
                <view:RepairsView/>
            </DataTemplate>
            <DataTemplate DataType="{x:Type viewModel:ServiceViewModel}">
                <view:ServiceView/>
            </DataTemplate>
            <DataTemplate DataType="{x:Type viewModel:AccountsViewModel}">
                <view:AccountsView/>
            </DataTemplate>
            <DataTemplate DataType="{x:Type viewModel:ReportsViewModel}">
                <view:ReportsView/>
            </DataTemplate>
            <DataTemplate DataType="{x:Type viewModel:AddCustomerViewModel}">
                <view:AddCustomerView/>
            </DataTemplate>
            <DataTemplate DataType="{x:Type viewModel:ViewCustomerViewModel}">
                <view:ViewCustomerView/>
            </DataTemplate>
            <DataTemplate DataType="{x:Type viewModel:UpdateCustomerViewModel}">
                <view:UpdateCustomerView/>
            </DataTemplate>
            <DataTemplate DataType="{x:Type viewModel:ViewVehiclesViewModel}">
                <view:ViewVehiclesView/>
            </DataTemplate>
            <DataTemplate DataType="{x:Type viewModel:AddVehiclesViewModel}">
                <view:AddVehiclesView/>
            </DataTemplate>
            <DataTemplate DataType="{x:Type viewModel:UpdateVehiclesViewModel}">
                <view:UpdateVehiclesView/>
            </DataTemplate>
            <DataTemplate DataType="{x:Type viewModel:InsuranceViewModel}">
                <view:InsuranceView/>
            </DataTemplate>
            <DataTemplate DataType="{x:Type viewModel:ViewBookingViewModel}">
                <view:ViewBookingView/>
            </DataTemplate>
            <DataTemplate DataType="{x:Type viewModel:AddBookingViewModel}">
                <view:AddBookingView/>
            </DataTemplate>
            <DataTemplate DataType="{x:Type viewModel:UpdateBookingViewModel}">
                <view:UpdateBookingView/>
            </DataTemplate>
            <DataTemplate DataType="{x:Type viewModel:AddOwnersViewModel}">
                <view:AddOwnersView/>
            </DataTemplate>
            <DataTemplate DataType="{x:Type viewModel:ViewOwnersViewModel}">
                <view:ViewOwnersView/>
            </DataTemplate>
            <DataTemplate DataType="{x:Type viewModel:UpdateOwnersViewModel}">
                <view:UpdateOwnersView/>
            </DataTemplate>
            <DataTemplate DataType="{x:Type viewModel:ViewRepairViewModel}">
                <view:ViewRepairView/>
            </DataTemplate>
            <DataTemplate DataType="{x:Type viewModel:AddRepairViewModel}">
                <view:AddRepairView/>
            </DataTemplate>
            <DataTemplate DataType="{x:Type viewModel:UpdateRepairViewModel}">
                <view:UpdateRepairView/>
            </DataTemplate>
            <DataTemplate DataType="{x:Type viewModel:ViewServiceViewModel}">
                <view:ViewServiceView/>
            </DataTemplate>
            <DataTemplate DataType="{x:Type viewModel:AddServiceViewModel}">
                <view:AddServiceView/>
            </DataTemplate>
            <DataTemplate DataType="{x:Type viewModel:UpdateServiceViewModel}">
                <view:UpdateServiceView/>
            </DataTemplate>

            <Style x:Key="FocusVisual">
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="MenuButtonStyle" TargetType="{x:Type Button}">
                <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="Padding" Value="1"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border x:Name="border" BorderBrush="{x:Null}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                                <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsDefaulted" Value="true">
                                    <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="Background" TargetName="border" Value="#4d4c4c"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter Property="Background" TargetName="border" Value="#4d4c4c"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <ControlTemplate x:Key="ScrollViewerSidePanel" TargetType="{x:Type ScrollViewer}">
                <Grid x:Name="Grid" Background="{TemplateBinding Background}">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    <Rectangle x:Name="Corner" Grid.Column="1" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" Grid.Row="1"/>
                    <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="False" CanVerticallyScroll="False" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="0" Margin="{TemplateBinding Padding}" Grid.Row="0"/>
                    <ScrollBar Style="{StaticResource ScrollbarMenu}" x:Name="PART_VerticalScrollBar" AutomationProperties.AutomationId="VerticalScrollBar" Cursor="Arrow" Grid.Column="1" Maximum="{TemplateBinding ScrollableHeight}" Minimum="0" Grid.Row="0" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}"/>
                    <ScrollBar x:Name="PART_HorizontalScrollBar" AutomationProperties.AutomationId="HorizontalScrollBar" Cursor="Arrow" Grid.Column="0" Maximum="{TemplateBinding ScrollableWidth}" Minimum="0" Orientation="Horizontal" Grid.Row="1" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}"/>
                </Grid>
            </ControlTemplate>

            <ControlTemplate x:Key="ScrollViewerSubMenu" TargetType="{x:Type ScrollViewer}">
                <Grid x:Name="Grid" Background="{TemplateBinding Background}">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    <Rectangle x:Name="Corner" Grid.Column="1" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" Grid.Row="1"/>
                    <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="False" CanVerticallyScroll="False" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="0" Margin="{TemplateBinding Padding}" Grid.Row="0"/>
                    <ScrollBar Style="{StaticResource ScrollbarSubView}" x:Name="PART_VerticalScrollBar" AutomationProperties.AutomationId="VerticalScrollBar" Cursor="Arrow" Grid.Column="1" Maximum="{TemplateBinding ScrollableHeight}" Minimum="0" Grid.Row="0" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}"/>
                    <ScrollBar x:Name="PART_HorizontalScrollBar" AutomationProperties.AutomationId="HorizontalScrollBar" Cursor="Arrow" Grid.Column="0" Maximum="{TemplateBinding ScrollableWidth}" Minimum="0" Orientation="Horizontal" Grid.Row="1" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}"/>
                </Grid>
            </ControlTemplate>

        </ResourceDictionary>
    </Application.Resources>
</Application>
